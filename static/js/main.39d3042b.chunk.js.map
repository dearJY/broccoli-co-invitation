{"version":3,"sources":["reportWebVitals.js","components/SuccessModal.tsx","hooks/UseDidUpdateEffect.tsx","components/InviteModal.tsx","utils/inputValidation.tsx","apis.tsx","components/MainPage.tsx","components/Home.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","theme","modalContainer","width","padding","spacing","modalTitle","textAlign","modalActions","marginTop","SuccessModal","props","fullScreen","useMediaQuery","useTheme","breakpoints","down","_classes","showModal","closeHandler","Dialog","className","open","data-testid","DialogTitle","DialogContentText","Button","variant","fullWidth","name","onClick","useDidUpdateEffect","func","dependencies","initialRender","useRef","useEffect","current","modalContent","display","flexDirection","InviteModal","_fullScreen","useState","nameValue","setNameValue","isNameValid","setIsNameValid","emailValue","setEmailValue","isEmailValid","setIsEmailValid","confirmEmailValue","setConfirmEmailValue","isConfirmEmailValid","setIsConfirmEmailValid","isRequesting","setIsRequesting","showSuccessModal","setShowSuccessModal","errorMessage","setErrorMessage","disableButton","setDisableButton","handleInputChange","label","event","value","target","handleCloseInviteModal","_cleanUpModal","toggleSuccessModal","leastLength","trim","length","validateTextInputLength","test","validateEmailInput","originalValue","currentValue","validateConfirmInput","hasEmptyInput","some","input","onClose","disableBackdropClick","DialogContent","TextField","id","type","error","helperText","onChange","e","color","disabled","email","axios","method","url","data","timeout","catch","message","finally","Typography","href","mainPage","height","justifyContent","alignItems","inviteContainer","MainPage","setShowModal","handleToggleModal","brand","fontWeight","app","grey","appBar","backgroundColor","margin","maxWidth","appContent","flex","overflow","appFooter","Home","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39d3042b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Dialog, DialogContentText, DialogTitle, useMediaQuery, useTheme,\n    Button, makeStyles } from \"@material-ui/core\";\n\ninterface SuccessModalProps {\n    showModal: boolean,\n    closeHandler: () => void\n}\n\nconst useStyles = makeStyles((theme) => ({\n    modalContainer: {\n        '& .MuiDialog-paper': {\n            width: 500,\n            padding: theme.spacing(3),\n            '& > div': {\n                padding: 0\n            }\n        },\n    },\n    modalTitle: {\n        textAlign: 'center'\n    },\n    modalActions: {\n        marginTop: theme.spacing(5),\n    }\n}));\n\n/**\n * The modal shown after invitation request is successfully processed.\n * @param {SuccessModalProps} props \n */\nexport default function SuccessModal(props: SuccessModalProps) {\n    const fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));//Show modal in fullscreen when viewport is sm.\n    const _classes = useStyles();\n    const { showModal, closeHandler } = props;\n    return (\n        <Dialog className={_classes.modalContainer} fullScreen={fullScreen} open={showModal} data-testid=\"success-modal\">\n            <DialogTitle className={_classes.modalTitle} data-testid=\"success-modal-title\">All done!</DialogTitle>\n            <DialogContentText data-testid=\"success-modal-text\">\n                You will be one of the first to experience\n                Broccoli &amp; Co. when we launch.\n            </DialogContentText>\n            <div className={_classes.modalActions}>\n                <Button \n                    variant=\"outlined\" \n                    fullWidth={true} \n                    name=\"ok\"\n                    onClick={closeHandler}\n                >\n                    Ok\n                </Button>\n            </div>\n        </Dialog>\n    )\n}","import { useEffect, useRef } from 'react';\n\n// Custom hook for not calling input function after initial rendering.\nconst useDidUpdateEffect = (func: () => void, dependencies: string[]) => {\n    const initialRender = useRef(true);\n    useEffect(() => {\n        if (initialRender.current) {\n            initialRender.current = false;\n          } else {\n              func();\n          }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, dependencies);\n}\n\nexport default useDidUpdateEffect;","import { Dialog, useMediaQuery, useTheme, DialogTitle, makeStyles,\n    DialogContent, TextField, Button, Typography } from \"@material-ui/core\";\nimport { ChangeEvent, useState, useEffect } from \"react\";\nimport SuccessModal from './SuccessModal';\nimport { sendInviteApi } from '../apis';\nimport { validateTextInputLength, validateEmailInput, validateConfirmInput } from '../utils/inputValidation';\nimport useDidUpdateEffect from '../hooks/UseDidUpdateEffect';\n\ninterface InviteModalProps {\n    showModal: boolean,\n    closeHandler: () => void,\n}\n\nconst useStyles = makeStyles((theme) => ({\n    modalContainer: {\n        '& .MuiDialog-paper': {\n            width: 500,\n            padding: theme.spacing(3),\n            '& > div': {\n                padding: 0\n            }\n        },\n    },\n    modalTitle: {\n        textAlign: 'center'\n    },\n    modalContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        '& > div': {\n            marginTop: theme.spacing(2)\n        }\n    },\n    modalActions: {\n        marginTop: theme.spacing(5),\n    }\n}));\n\n/**\n * Popup Modal for invitation requesting form\n * @param {InviteModalProps} props\n */\nexport default function InviteModal(props: InviteModalProps) {\n    const _classes = useStyles();\n\n    // Show modal in fullscreen when viewport is sm.\n    const _fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\n\n    const {showModal, closeHandler} = props;\n\n    // State for name input\n    const [nameValue, setNameValue] = useState(\"\");\n\n    // If name input is valid\n    const [isNameValid, setIsNameValid] = useState(true);\n\n    // State for email input\n    const [emailValue, setEmailValue] = useState(\"\");\n\n    // If email input is valid\n    const [isEmailValid, setIsEmailValid] = useState(true);\n\n    // State for confirm email input\n    const [confirmEmailValue, setConfirmEmailValue] = useState(\"\");\n\n    // If confirm email input is valid\n    const [isConfirmEmailValid, setIsConfirmEmailValid] = useState(true);\n\n    // If request is processing\n    const [isRequesting, setIsRequesting] = useState(false);\n\n    // State for controlling modal appearance\n    const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n    // Error message from response\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    // If send button should be disabled\n    const  [disableButton, setDisableButton] = useState(true);\n\n    // Change event handler for all inputs\n    const handleInputChange = (label: string, event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        const { value } = event.target;\n        switch(label) {\n            case 'name':\n                setNameValue(value);\n                break;\n            case 'email':\n                setEmailValue(value);\n                break;\n            case 'confirmEmail':\n                setConfirmEmailValue(value);\n                break;\n        }\n    };\n\n    // Event handler for closing modal by clicking backdrop\n    const handleCloseInviteModal = () => {\n        closeHandler();\n        _cleanUpModal();\n    };\n\n    // Event handler for clicking send button to submit form\n    const handleSubmitForm = () => {\n        setIsRequesting(true);\n        setErrorMessage(\"\");\n\n        sendInviteApi(nameValue, emailValue)\n            .then(() => {\n                handleCloseInviteModal();\n                toggleSuccessModal();\n            })\n            .catch((error) => {\n                setErrorMessage(error.message || \"Unknown\");\n            })\n            .finally(() => {\n                setIsRequesting(false);\n            })\n    };\n\n    // Event handler for opening and closing success modal\n    const toggleSuccessModal = () => {\n        setShowSuccessModal(!showSuccessModal);\n    };\n\n    // Helper function for clean up momdal to the initial state\n    const _cleanUpModal = () => {\n        setNameValue(\"\");\n        setEmailValue(\"\");\n        setConfirmEmailValue(\"\");\n        setErrorMessage(\"\");\n    }\n\n    // Validate all the inputs when there is a input change.\n    // NOTE: Empty input is regarded as valid to prevent showing error message\n    useDidUpdateEffect(() => {\n        setIsNameValid(!nameValue || validateTextInputLength(3, nameValue));\n        setIsEmailValid(!emailValue || validateEmailInput(emailValue));\n        setIsConfirmEmailValid(!confirmEmailValue || validateConfirmInput(emailValue, confirmEmailValue));\n    }, [nameValue, emailValue, confirmEmailValue])\n\n    // Disable or enable send button when related states get changed.\n    // Conditions for disabling button:\n    // 1. Request is processing; 2. There is a empty input; 3. There is an invalid input.\n    useEffect(() => {\n        const hasEmptyInput = [nameValue, emailValue, confirmEmailValue].some((input) => !input);\n        const disableButton = isRequesting || hasEmptyInput || !isNameValid || !isEmailValid || !isConfirmEmailValid;\n        setDisableButton(disableButton);\n    }, [nameValue, emailValue, confirmEmailValue, isNameValid, isEmailValid, isConfirmEmailValid, isRequesting])\n\n    return (\n        <div>\n            <Dialog \n                className={_classes.modalContainer} \n                fullScreen={_fullScreen} \n                open={showModal} \n                onClose={handleCloseInviteModal} \n                data-testid=\"invite-modal\"\n                disableBackdropClick={isRequesting}\n            >\n                <DialogTitle className={_classes.modalTitle} data-testid=\"invite-modal-title\">Request an invite</DialogTitle>\n                <DialogContent className={_classes.modalContent} data-testid=\"invite-modal-form\">\n                        <TextField\n                            data-testid=\"full-name-input\"\n                            id=\"full-name-input\"\n                            variant=\"outlined\"\n                            label=\"Full name\"\n                            type=\"text\"\n                            value={nameValue}\n                            error={!isNameValid}\n                            helperText={isNameValid ? '' : 'At least 3 characters'}\n                            onChange={(e) => handleInputChange('name', e)}\n                        />\n                        <TextField\n                            data-testid=\"email-input\"\n                            id=\"email-input\"\n                            variant=\"outlined\"\n                            label=\"Email\"\n                            type=\"email\"\n                            value={emailValue}\n                            error={!isEmailValid}\n                            helperText={isEmailValid ? '' : 'Incorrect email format'}\n                            onChange={(e) => handleInputChange('email', e)}\n                        />\n                        <TextField\n                            data-testid=\"confirm-email-input\"\n                            id=\"confirm-email-input\"\n                            variant=\"outlined\"\n                            label=\"Confirm email\"\n                            type=\"email\"\n                            value={confirmEmailValue}\n                            error={!isConfirmEmailValid}\n                            helperText={isConfirmEmailValid ? '' : 'Not match pre-entered email'}\n                            onChange={(e) => handleInputChange('confirmEmail', e)}\n                        />\n                </DialogContent>\n                <div className={_classes.modalActions}>\n                    <Button \n                        variant=\"contained\" \n                        color=\"primary\" \n                        fullWidth={true} \n                        name=\"submit\"\n                        disabled={disableButton}\n                        onClick={handleSubmitForm}\n                    >\n                            {isRequesting ?  'Sending, please wait...' : 'Send'}\n                    </Button>\n                </div>\n                { errorMessage && \n                    <Typography variant=\"body2\" color=\"error\" data-testid=\"error-message\">\n                        Error: {errorMessage}. Please try again or contact <a href=\"mailto: support@airwallex.com\">support@airwallex.com</a> for help.\n                    </Typography> \n                }\n            </Dialog>\n            <SuccessModal showModal={showSuccessModal} closeHandler={toggleSuccessModal}/>\n        </div>\n    );\n}","// Check if the input value is equal to / greater than the least length.\nexport function validateTextInputLength(leastLength: number = 0, value: string): boolean {\n    try {\n        return value.trim().length >= leastLength;\n    } catch {\n        return false;\n    }\n}\n\n// Check if the input value match the standard email format\nexport function validateEmailInput(value: string): boolean {\n    try {\n        const re = /\\S+@\\S+/;\n        return re.test(value.trim());\n    } catch {\n        return false;\n    }\n}\n\n// Check if the input value is equal to the target value.\nexport function validateConfirmInput(originalValue: string, currentValue: string) {\n    try {\n        return originalValue.trim() === currentValue.trim();\n    } catch {\n        return false;\n    }\n}","import axios, { AxiosResponse } from 'axios';\n\n/**\n * This file holds all the apis.\n */\n\nexport const SEND_INVITE_URL = 'https://l94wc2001h.execute-api.ap-southeast-2.amazonaws.com/prod/fake-auth';\n\nexport function sendInviteApi(name: string, email: string): Promise<AxiosResponse> {\n    return axios({\n        method: 'post',\n        url: SEND_INVITE_URL,\n        data: {\n            name,\n            email\n        },\n        timeout: 10000\n    });\n}","import { Button, makeStyles, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport InviteModal from './InviteModal';\n\nconst useStyles = makeStyles((theme) => ({\n    mainPage: {\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    inviteContainer: {\n        textAlign: 'center',\n        '& > *:not(:first-child)': {\n            marginTop: theme.spacing(2)\n        }\n    }\n}));\n\n/**\n * Main body of the application which holds functionalities of\n * requesting invitation.\n */\nexport default function MainPage() {\n    const _classes: Record<string, string> = useStyles();\n    const [showModal, setShowModal] = useState(false);\n\n    const handleToggleModal = () => {\n        setShowModal(!showModal);\n    };\n\n    return (\n        <div className={_classes.mainPage}>\n            <div className={_classes.inviteContainer} data-testid=\"inivite-container\">\n                <div>\n                    <Typography variant=\"h2\">A better way</Typography>\n                    <Typography variant=\"h2\">to enjoy every day</Typography>\n                </div>\n                <Typography variant=\"body1\">Be the first to know when we launch</Typography>\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleToggleModal}>Request an invite</Button>\n            </div>\n\n            <InviteModal \n                showModal={showModal}\n                closeHandler={handleToggleModal}\n            />\n        </div>\n    )\n}","import { Container, makeStyles, Typography } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\nimport * as React from 'react';\nimport MainPage from './MainPage';\n\nconst useStyles = makeStyles((theme) => ({\n    brand: {\n        fontWeight: 'bold'\n    },\n    app: {\n        display: 'flex',\n        flexDirection: 'column',\n        color: grey[900],\n        height: '100%'\n    },\n    appBar: {\n        backgroundColor: grey[300],\n        padding: theme.spacing(4, 24),\n        margin: 0,\n        maxWidth: '100%'\n    },\n    appContent: {\n        flex: 1,\n        overflow: 'auto' \n    },\n    appFooter: {\n        textAlign: 'center'\n    }\n}));\n\n/**\n * The Home page for Broccoli&Co including page header, page main body and page footer.\n */\nexport default function Home() {\n    const _classes: Record<string, string> = useStyles();\n    return (\n        <div className={_classes.app}>\n            <Container className={_classes.appBar} data-testid=\"home-header\">\n                <Typography variant=\"h5\" color=\"inherit\" className={_classes.brand}>\n                    BROCCOLI &amp; CO.\n                </Typography>\n            </Container>\n            <main className={_classes.appContent}>\n                <MainPage />\n            </main>\n            <Container className={`${_classes.appFooter} ${_classes.appBar}`} data-testid=\"home-footer\">\n                <Typography variant=\"body1\">Made with love in Melbourne.</Typography>\n                <Typography variant=\"body1\">2021 Broccoli &amp; CO. All rights reserved</Typography>\n            </Container>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Home from './components/Home';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}